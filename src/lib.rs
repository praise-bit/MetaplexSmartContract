use anchor_lang::prelude::*;
use anchor_spl::token::{Mint, Token, TokenAccount};
use mpl_token_metadata::instruction::create_metadata_accounts_v2;
use solana_program::program::invoke;

declare_id!("4Nd1mYw7E7w9G8bXJv2qkZx5MhfV1LQ7KJ2r7s8k9vUe");

#[program]
pub mod metaplex_smart_contract {
    use super::*;

    pub fn initialize(_ctx: Context<Initialize>) -> Result<()> {
        Ok(())
    }

    pub fn mint_nft(
        ctx: Context<MintNFT>,
        name: String,
        symbol: String,
        uri: String,
    ) -> Result<()> {
        let ix = create_metadata_accounts_v2(
            ctx.accounts.token_metadata_program.key(),   // Metadata program
            ctx.accounts.metadata.key(),                 // PDA Metadata
            ctx.accounts.mint.key(),                     // Mint address
            ctx.accounts.mint_authority.key(),           // Mint authority
            ctx.accounts.payer.key(),                    // Payer
            ctx.accounts.update_authority.key(),         // Update authority
            name,
            symbol,
            uri,
            None,                                        // Creators
            0,                                           // Seller fee basis points
            true,                                        // Update authority is signer
            false,                                       // Is mutable
            None,                                        // Collection
            None,                                        // Uses
        );

        invoke(
            &ix,
            &[
                ctx.accounts.metadata.to_account_info(),
                ctx.accounts.mint.to_account_info(),
                ctx.accounts.mint_authority.to_account_info(),
                ctx.accounts.payer.to_account_info(),
                ctx.accounts.update_authority.to_account_info(),
                ctx.accounts.token_metadata_program.to_account_info(),
            ],
        )?;

        Ok(())
    }
}

#[derive(Accounts)]
pub struct Initialize {}

#[derive(Accounts)]
pub struct MintNFT<'info> {
    /// PDA metadata account generated by Metaplex
    #[account(mut)]
    pub metadata: UncheckedAccount<'info>,

    /// Mint account for the NFT
    #[account(mut)]
    pub mint: Account<'info, Mint>,

    /// Authority allowed to mint the NFT
    pub mint_authority: Signer<'info>,

    /// Pays for the account creation and fees
    #[account(mut)]
    pub payer: Signer<'info>,

    /// Update authority of the NFT metadata
    pub update_authority: Signer<'info>,

    /// Metaplex Token Metadata program
    pub token_metadata_program: UncheckedAccount<'info>,

    /// Token program
    pub token_program: Program<'info, Token>,

    /// System program
    pub system_program: Program<'info, System>,
}